import math


def print_test_result(condition):
    print("\n-----------------------------------\n")

    if condition:
        print("Test passed.")
    else:
        print("Test not passed. Try again.")


def sample_test(variant):
    print("Test passed. Variant used:", variant)


def task_1(variant, value, rounded_value, D_value, d_value):
    answers = {
        0: [0.3513, 0.351, 0.0003, 0.0008547],
        1: [0.125004, 0.125, 4.000000000004e-06, 3.199897603279895e-05],
        2: [0.251186, 0.251, 0.00018600000000001948, 0.0007404871290598181],
        3: [0.400284, 0.4, 0.00028399999999995096, 0.000709496257656941],
        4: [0.994688, 0.995, 0.00031199999999997896, 0.00031366619482689945],
        5: [0.394888, 0.395, 0.00011200000000000099, 0.0002836247239723693],
        6: [0.968756, 0.969, 0.00024400000000002198, 0.0002518694077765939],
        7: [0.292603, 0.293, 0.0003969999999999807, 0.0013567871826330581],
        8: [0.302552, 0.303, 0.00044800000000000395, 0.0014807371955895315],
        9: [0.986044, 0.986, 4.4000000000044004e-05, 4.462275517121346e-05],
        10: [0.969689, 0.97, 0.0003109999999999502, 0.00032072138592883923],
        11: [0.253014, 0.253, 1.4000000000014001e-05, 5.533290647953868e-05],
        12: [0.396716, 0.397, 0.00028400000000000647, 0.0007158773530687103],
        13: [0.549447, 0.549, 0.0004469999999999752, 0.0008135452555023053],
        14: [0.644628, 0.645, 0.00037200000000003897, 0.0005770770118580623],
        15: [0.178923, 0.179, 7.699999999999374e-05, 0.00043035272156175414],
        16: [0.672051, 0.672, 4.999999999999449e-05, 7.439922624803882e-05],
        17: [0.460176, 0.46, 0.00017599999999995397, 0.0003824623622265263],
        18: [0.402321, 0.402, 0.00031999999999998696, 0.0007953867568104666],
        19: [0.373197, 0.373, 0.00019700000000000273, 0.0005278713387299542],
        20: [0.259692, 0.26, 0.00030800000000003047, 0.0011860203625834855],
        21: [0.554992, 0.555, 8.000000000008e-06, 1.4414622192766743e-05],
        22: [0.401698, 0.402, 0.00030200000000002447, 0.0007518085726093346],
        23: [0.464646, 0.465, 0.00035400000000002096, 0.0007618703270877636],
        24: [0.350531, 0.351, 0.00046999999999997044, 0.0013408267480671282],
        25: [0.024279, 0.024, 0.000278999999999998, 0.01149141233164455],
        26: [0.640365, 0.64, 0.0003649999999999487, 0.000569987429044293],
        27: [0.889488, 0.889, 0.00048799999999993293, 0.0005486302232294679],
        28: [0.771095, 0.771, 9.499999999995623e-05, 0.00012320142135528855],
        29: [0.292256, 0.292, 0.000256000000000034, 0.0008759443775321429],
        30: [0.217541, 0.218, 0.0004589999999999872, 0.0021099470904334685]}

    print_test_result(answers.get(variant)[0] == value and
                      answers.get(variant)[1] == rounded_value and
                      math.isclose(answers.get(variant)[0], D_value, rel_tol=1e-05, abs_tol=1e-05) and
                      math.isclose(answers.get(variant)[1], d_value, rel_tol=1e-05, abs_tol=1e-05))


def task_2_a(variant, right_count, right_numbers, doubtful_count, doubtful_numbers):
    answers = {
        0: [3, '8, 5, 2', 2, '6, 7'], 1: [3, '6, 2, 2', 4, '2, 1, 4, 2'], 2: [3, '1, 7, 7', 4, '2, 8, 9, 6'],
        3: [3, '3, 3, 9', 3, '9, 3, 4'], 4: [3, '8, 2, 4', 3, '2, 7, 6'], 5: [3, '3, 4, 7', 4, '3, 7, 1, 4'],
        6: [3, '4, 9, 6', 2, '8, 6'], 7: [3, '5, 0, 5', 4, '5, 2, 4, 2'], 8: [4, '4, 4, 4, 3', 3, '2, 7, 7'],
        9: [4, '7, 8, 7, 8', 3, '1, 8, 8'], 10: [3, '6, 0, 2', 4, '4, 1, 0, 7'], 11: [3, '7, 9, 8', 4, '2, 1, 3, 2'],
        12: [3, '7, 1, 8', 4, '3, 8, 2, 2'], 13: [4, '7, 6, 7, 6', 2, '9, 3'], 14: [3, '4, 3, 4', 2, '6, 4'],
        15: [3, '6, 8, 2', 4, '0, 6, 0, 7'], 16: [4, '4, 9, 5, 4', 3, '3, 1, 7'], 17: [4, '2, 3, 1, 8', 3, '2, 4, 7'],
        18: [4, '6, 6, 9, 6', 3, '2, 9, 6'], 19: [4, '9, 8, 8, 1', 3, '0, 4, 8'], 20: [4, '1, 8, 2, 9', 3, '0, 3, 9'],
        21: [4, '7, 9, 0, 2', 3, '1, 7, 9'], 22: [4, '5, 4, 0, 7', 2, '5, 3'], 23: [4, '9, 5, 4, 4', 2, '8, 5'],
        24: [4, '5, 3, 5, 2', 3, '8, 8, 9'], 25: [2, '1, 0', 2, '1, 7'], 26: [3, '5, 3, 0', 2, '6, 9'],
        27: [4, '9, 1, 8, 2', 3, '4, 2, 4'], 28: [3, '2, 4, 5', 3, '7, 3, 1'], 29: [4, '6, 7, 1, 4', 3, '1, 3, 1'],
        30: [4, '9, 6, 4, 3', 2, '9, 4']
    }

    print_test_result(answers.get(variant)[0] == right_count and
                      answers.get(variant)[1] == right_numbers and
                      answers.get(variant)[2] == doubtful_count and
                      answers.get(variant)[3] == doubtful_numbers)


def task_2_b(variant, right_count, right_numbers, doubtful_count, doubtful_numbers):
    answers = {
        0: [4, '8, 5, 2, 6', 1, '7'], 1: [4, '6, 2, 2, 2', 3, '1, 4, 2'], 2: [4, '1, 7, 7, 2', 3, '8, 9, 6'],
        3: [3, '3, 3, 9', 3, '9, 3, 4'], 4: [4, '8, 2, 4, 2', 2, '7, 6'], 5: [4, '3, 4, 7, 3', 3, '7, 1, 4'],
        6: [4, '4, 9, 6, 8', 1, '6'], 7: [4, '5, 0, 5, 5', 3, '2, 4, 2'], 8: [4, '4, 4, 4, 3', 3, '2, 7, 7'],
        9: [4, '7, 8, 7, 8', 3, '1, 8, 8'], 10: [4, '6, 0, 2, 4', 3, '1, 0, 7'], 11: [4, '7, 9, 8, 2', 3, '1, 3, 2'],
        12: [4, '7, 1, 8, 3', 3, '8, 2, 2'], 13: [4, '7, 6, 7, 6', 2, '9, 3'], 14: [4, '4, 3, 4, 6', 1, '4'],
        15: [4, '6, 8, 2, 0', 3, '6, 0, 7'], 16: [5, '4, 9, 5, 4, 3', 2, '1, 7'], 17: [4, '2, 3, 1, 8', 3, '2, 4, 7'],
        18: [4, '6, 6, 9, 6', 3, '2, 9, 6'], 19: [4, '9, 8, 8, 1', 3, '0, 4, 8'], 20: [4, '1, 8, 2, 9', 3, '0, 3, 9'],
        21: [4, '7, 9, 0, 2', 3, '1, 7, 9'], 22: [4, '5, 4, 0, 7', 2, '5, 3'], 23: [4, '9, 5, 4, 4', 2, '8, 5'],
        24: [4, '5, 3, 5, 2', 3, '8, 8, 9'], 25: [3, '1, 0, 1', 1, '7'], 26: [4, '5, 3, 0, 6', 1, '9'],
        27: [4, '9, 1, 8, 2', 3, '4, 2, 4'], 28: [3, '2, 4, 5', 3, '7, 3, 1'], 29: [5, '6, 7, 1, 4, 1', 2, '3, 1'],
        30: [4, '9, 6, 4, 3', 2, '9, 4']
    }

    print_test_result(answers.get(variant)[0] == right_count and
                      answers.get(variant)[1] == right_numbers and
                      answers.get(variant)[2] == doubtful_count and
                      answers.get(variant)[3] == doubtful_numbers)


def task_3(variant, f_x_exact, D_f, d_f):
    answers = {
        0: [-0.0099, 0.03, 1.4925373]
    }

    print_test_result(True)


def task_4(variant, d_value_1, d_value_2):
    answers = {
        0: [-0.0099, 0.00024, 0.00064]
    }

    print_test_result(True)


def task_5_a(variant, final_value, final_error):
    answers = {
        0: [72, 0.35299]
    }

    print_test_result(True)


def task_5_b(variant, final_value, final_error):
    answers = {
        0: [2.35, 0.0043999]
    }

    print_test_result(True)


def task_6_a(variant, bounded_D_value, bounded_d_value):
    answers = {
        0: [0.00005, 0.00011475]
    }

    print_test_result(True)


def task_6_b(variant, bounded_D_value, bounded_d_value):
    answers = {
        0: [0.00005, 0.00011475]
    }

    print_test_result(True)


def task_7(variant,rights_count, f, D_f):
    answers = {
        0: [0.00005, 0.00011475]
    }

    print_test_result(True)


def task_8(variant, rights_count, f, D_f):
    answers = {
        0: [0.00005, 0.00011475]
    }

    print_test_result(True)


def task_9(variant,result):
    answers = {
        0: [0.00005, 0.00011475]
    }

    print_test_result(True)
